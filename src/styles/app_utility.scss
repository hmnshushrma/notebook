// Breakpoints
$breakpoints: (
  "xs": 0,       // Extra small (mobile)
  "sm": 576px,   // Small (tablet)
  "md": 768px,   // Medium (small desktop)
  "lg": 992px,   // Large (desktop)
  "xl": 1200px   // Extra large (large desktop)
);

// Media query mixin for breakpoints
@mixin respond-to($breakpoint) {
  @media (min-width: map-get($breakpoints, $breakpoint)) {
    @content;
  }
}

// Variables for spacing, colors, and animation duration
$spacing-scale: 0 0.25rem 0.5rem 1rem 1.5rem 2rem 3rem;
$colors: (
  "primary": #007bff,
  "secondary": #6c757d,
  "success": #28a745,
  "danger": #dc3545,
  "warning": #ffc107,
  "info": #17a2b8,
  "light": #f8f9fa,
  "dark": #343a40
);
$animation-duration: 0.3s;

// Utility for spacing (margin/padding) with breakpoints
@mixin generate-spacing-utilities($property, $scale) {
  @for $i from 0 through length($scale) - 1 {
    .#{$property}-#{$i} {
      #{$property}: nth($scale, $i + 1);
    }
    
    // Responsive versions
    @each $breakpoint, $value in $breakpoints {
      @include respond-to($breakpoint) {
        .#{$property}-#{$i}-#{$breakpoint} {
          #{$property}: nth($scale, $i + 1);
        }
      }
    }
  }
}

// Utility for width/height with breakpoints
@mixin generate-size-utilities($property, $scale) {
  @for $i from 1 through length($scale) - 1 {
    .#{$property}-#{$i} {
      #{$property}: nth($scale, $i + 1);
    }

    // Responsive versions
    @each $breakpoint, $value in $breakpoints {
      @include respond-to($breakpoint) {
        .#{$property}-#{$i}-#{$breakpoint} {
          #{$property}: nth($scale, $i + 1);
        }
      }
    }
  }
}

// Utility for color
@mixin generate-color-utilities($property) {
  @each $name, $color in $colors {
    .#{$property}-#{$name} {
      #{$property}: $color;
    }
  }
}

// Display utilities
.display-block { display: block; }
.display-inline-block { display: inline-block; }
.display-flex { display: flex; }
.display-inline { display: inline; }
.display-none { display: none; }

// Justify-content utilities (for flex containers)
.justify-start { justify-content: flex-start; }
.justify-end { justify-content: flex-end; }
.justify-center { justify-content: center; }
.justify-between { justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }

// Align-items utilities (for flex containers)
.align-start { align-items: flex-start; }
.align-end { align-items: flex-end; }
.align-center { align-items: center; }
.align-stretch { align-items: stretch; }
.align-baseline { align-items: baseline; }

// Generate margin and padding utilities
@include generate-spacing-utilities("m", $spacing-scale); // Margin
@include generate-spacing-utilities("p", $spacing-scale); // Padding

// Generate width and height utilities
@include generate-size-utilities("w", (0, 25%, 50%, 75%, 100%)); // Width
@include generate-size-utilities("h", (0, 25%, 50%, 75%, 100%)); // Height

// Color utilities
@include generate-color-utilities("bg"); // Background colors
@include generate-color-utilities("text"); // Text colors

// Text utilities
.text-uppercase { text-transform: uppercase; }
.text-lowercase { text-transform: lowercase; }
.text-capitalize { text-transform: capitalize; }
.text-italic { font-style: italic; }
.text-bold { font-weight: bold; }
.text-light { font-weight: lighter; }
.text-center { text-align: center; }
.text-right { text-align: right; }
.text-left { text-align: left; }
.text-strike { text-decoration: line-through; }
.text-underline { text-decoration: underline; }
.text-overline { text-decoration: overline; }
.text-nowrap { white-space: nowrap; }
.text-wrap { white-space: normal; }

// Form input utilities
.input {
  padding: 0.5rem;
  border: 1px solid map-get($colors, "light");
  border-radius: 0.25rem;
  width: 100%;
  transition: border-color $animation-duration ease-in-out;

  &:focus {
    border-color: map-get($colors, "primary");
    outline: none;
  }
}

// Animations
.fade-in {
  animation: fadeIn $animation-duration ease-in-out;
}
.fade-out {
  animation: fadeOut $animation-duration ease-in-out;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes fadeOut {
  from { opacity: 1; }
  to { opacity: 0; }
}

// Example for buttons
.btn-primary {
  @extend .bg-primary;
  @extend .text-light;
  padding: 0.75rem 1.25rem;
  border: none;
  border-radius: 0.25rem;
  cursor: pointer;
  transition: background-color $animation-duration ease-in-out;

  &:hover {
    background-color: darken(map-get($colors, "primary"), 10%);
  }
}
